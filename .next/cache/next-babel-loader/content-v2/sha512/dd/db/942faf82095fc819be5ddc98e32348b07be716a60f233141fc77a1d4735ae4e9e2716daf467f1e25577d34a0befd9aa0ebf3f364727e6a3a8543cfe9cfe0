{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\TP\\\\v1\\\\TradingPlanet-Home\\\\components\\\\Header\\\\Settings.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Popover from '@material-ui/core/Popover';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport CheckIcon from '@material-ui/icons/Check';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Switch from '@material-ui/core/Switch';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { i18n, withTranslation } from \"../../i18n\";\nimport useStyles from './header-style';\nvar themeType = 'light';\n\nif (typeof Storage !== 'undefined') {\n  themeType = localStorage.getItem('luxiTheme') || 'light';\n}\n\nfunction Settings(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(null),\n      ctn = _useState[0],\n      setCtn = _useState[1];\n\n  var classes = useStyles();\n\n  var _useState2 = useState(null),\n      anchorEl = _useState2[0],\n      setAnchorEl = _useState2[1];\n\n  var _useState3 = useState(themeType === 'dark'),\n      isDark = _useState3[0],\n      setDark = _useState3[1];\n\n  function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  var handleChangeMode = function handleChangeMode() {\n    setDark(!isDark);\n    props.toggleDark();\n  };\n\n  function handleChangeLang(lang) {\n    if (lang === 'ara') {\n      i18n.changeLanguage('ara');\n      props.toggleDir('rtl');\n    } else {\n      i18n.changeLanguage(lang);\n      props.toggleDir('ltr');\n    }\n\n    setAnchorEl(null);\n  }\n\n  useEffect(function () {\n    setCtn(document.getElementById('main-wrap'));\n  });\n  var open = Boolean(anchorEl);\n  var id = open ? 'simple-popover' : undefined;\n  var invert = props.invert,\n      t = props.t;\n  return __jsx(\"div\", {\n    className: classes.setting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(IconButton, {\n    \"aria-describedby\": id,\n    \"aria-label\": \"Settings\",\n    onClick: handleClick,\n    className: clsx(classes.icon, open && classes.active, invert && classes.invert),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(SettingsIcon, {\n    fontSize: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  })), __jsx(Popover, {\n    id: id,\n    open: open,\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    container: ctn,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, __jsx(List, {\n    component: \"nav\",\n    className: classes.modeMenu,\n    \"aria-label\": \"Mode-menu\",\n    subheader: __jsx(ListSubheader, {\n      component: \"div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, t('common:crypto-landing.header_theme')),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, __jsx(Typography, {\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    component: \"label\",\n    container: true,\n    alignItems: \"center\",\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, t('common:crypto-landing.header_light')), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, __jsx(Switch, {\n    checked: isDark,\n    onChange: handleChangeMode,\n    value: isDark,\n    inputProps: {\n      'aria-label': 'checkbox'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }\n  })), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, t('common:crypto-landing.header_dark')))))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), __jsx(List, {\n    component: \"nav\",\n    className: classes.langMenu,\n    \"aria-label\": \"Language-menu\",\n    subheader: __jsx(ListSubheader, {\n      component: \"div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, t('common:crypto-landing.header_language')),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, i18n.options.allLanguages && i18n.options.allLanguages.map(function (val) {\n    return __jsx(ListItem, {\n      key: val,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: function onClick() {\n        return handleChangeLang(val);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, __jsx(ListItemIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, __jsx(\"i\", {\n      className: val,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    })), __jsx(ListItemText, {\n      primary: t('common:' + val),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }), i18n.language === val && __jsx(ListItemSecondaryAction, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, __jsx(CheckIcon, {\n      color: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 19\n      }\n    })));\n  }))));\n}\n\n_s(Settings, \"dcOk0+BH6aMq2ZixiRwUWDl7H0U=\", false, function () {\n  return [useStyles];\n});\n\n_c = Settings;\nSettings.propTypes = {\n  toggleDark: PropTypes.func.isRequired,\n  toggleDir: PropTypes.func.isRequired,\n  t: PropTypes.func.isRequired,\n  invert: PropTypes.bool\n};\nSettings.defaultProps = {\n  invert: false\n};\nexport default withTranslation(['common', 'crypto-landing'])(Settings);\n\nvar _c;\n\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"sources":["D:/projects/TP/v1/TradingPlanet-Home/components/Header/Settings.js"],"names":["React","useState","useEffect","PropTypes","clsx","Popover","IconButton","SettingsIcon","CheckIcon","List","ListSubheader","ListItem","ListItemIcon","ListItemSecondaryAction","ListItemText","Switch","Divider","Grid","Typography","i18n","withTranslation","useStyles","themeType","Storage","localStorage","getItem","Settings","props","ctn","setCtn","classes","anchorEl","setAnchorEl","isDark","setDark","handleClick","event","currentTarget","handleClose","handleChangeMode","toggleDark","handleChangeLang","lang","changeLanguage","toggleDir","document","getElementById","open","Boolean","id","undefined","invert","t","setting","icon","active","vertical","horizontal","modeMenu","langMenu","options","allLanguages","map","val","language","propTypes","func","isRequired","bool","defaultProps"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,uBAAP,MAAoC,2CAApC;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,IAAT,EAAeC,eAAf,QAAsC,YAAtC;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,IAAIC,SAAS,GAAG,OAAhB;;AACA,IAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;AAClCD,EAAAA,SAAS,GAAGE,YAAY,CAACC,OAAb,CAAqB,WAArB,KAAqC,OAAjD;AACD;;AAED,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAAA;;AAAA,kBACD1B,QAAQ,CAAC,IAAD,CADP;AAAA,MAChB2B,GADgB;AAAA,MACXC,MADW;;AAEvB,MAAMC,OAAO,GAAGT,SAAS,EAAzB;;AAFuB,mBAGSpB,QAAQ,CAAC,IAAD,CAHjB;AAAA,MAGhB8B,QAHgB;AAAA,MAGNC,WAHM;;AAAA,mBAIG/B,QAAQ,CAACqB,SAAS,KAAK,MAAf,CAJX;AAAA,MAIhBW,MAJgB;AAAA,MAIRC,OAJQ;;AAMvB,WAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1BJ,IAAAA,WAAW,CAACI,KAAK,CAACC,aAAP,CAAX;AACD;;AAED,WAASC,WAAT,GAAuB;AACrBN,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,MAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BL,IAAAA,OAAO,CAAC,CAACD,MAAF,CAAP;AACAN,IAAAA,KAAK,CAACa,UAAN;AACD,GAHD;;AAKA,WAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,QAAIA,IAAI,KAAK,KAAb,EAAoB;AAClBvB,MAAAA,IAAI,CAACwB,cAAL,CAAoB,KAApB;AACAhB,MAAAA,KAAK,CAACiB,SAAN,CAAgB,KAAhB;AACD,KAHD,MAGO;AACLzB,MAAAA,IAAI,CAACwB,cAAL,CAAoBD,IAApB;AACAf,MAAAA,KAAK,CAACiB,SAAN,CAAgB,KAAhB;AACD;;AACDZ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED9B,EAAAA,SAAS,CAAC,YAAM;AACd2B,IAAAA,MAAM,CAACgB,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAD,CAAN;AACD,GAFQ,CAAT;AAIA,MAAMC,IAAI,GAAGC,OAAO,CAACjB,QAAD,CAApB;AACA,MAAMkB,EAAE,GAAGF,IAAI,GAAG,gBAAH,GAAsBG,SAArC;AAnCuB,MAoCfC,MApCe,GAoCDxB,KApCC,CAoCfwB,MApCe;AAAA,MAoCPC,CApCO,GAoCDzB,KApCC,CAoCPyB,CApCO;AAqCvB,SACE;AAAK,IAAA,SAAS,EAAEtB,OAAO,CAACuB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,wBAAkBJ,EADpB;AAEE,kBAAW,UAFb;AAGE,IAAA,OAAO,EAAEd,WAHX;AAIE,IAAA,SAAS,EACP/B,IAAI,CACF0B,OAAO,CAACwB,IADN,EAEFP,IAAI,IAAIjB,OAAO,CAACyB,MAFd,EAGFJ,MAAM,IAAIrB,OAAO,CAACqB,MAHhB,CALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYE,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADF,EAeE,MAAC,OAAD;AACE,IAAA,EAAE,EAAEF,EADN;AAEE,IAAA,IAAI,EAAEF,IAFR;AAGE,IAAA,QAAQ,EAAEhB,QAHZ;AAIE,IAAA,OAAO,EAAEO,WAJX;AAKE,IAAA,SAAS,EAAEV,GALb;AAME,IAAA,YAAY,EAAE;AACZ4B,MAAAA,QAAQ,EAAE,QADE;AAEZC,MAAAA,UAAU,EAAE;AAFA,KANhB;AAUE,IAAA,eAAe,EAAE;AACfD,MAAAA,QAAQ,EAAE,KADK;AAEfC,MAAAA,UAAU,EAAE;AAFG,KAVnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeE,MAAC,IAAD;AACE,IAAA,SAAS,EAAC,KADZ;AAEE,IAAA,SAAS,EAAE3B,OAAO,CAAC4B,QAFrB;AAGE,kBAAW,WAHb;AAIE,IAAA,SAAS,EACP,MAAC,aAAD;AAAe,MAAA,SAAS,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGN,CAAC,CAAC,oCAAD,CADJ,CALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAC,OAAhB;AAAwB,IAAA,SAAS,MAAjC;AAAkC,IAAA,UAAU,EAAC,QAA7C;AAAsD,IAAA,OAAO,EAAE,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYA,CAAC,CAAC,oCAAD,CAAb,CADF,EAEE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,OAAO,EAAEnB,MADX;AAEE,IAAA,QAAQ,EAAEM,gBAFZ;AAGE,IAAA,KAAK,EAAEN,MAHT;AAIE,IAAA,UAAU,EAAE;AAAE,oBAAc;AAAhB,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,EAUE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYmB,CAAC,CAAC,mCAAD,CAAb,CAVF,CADF,CADF,CAVF,CAfF,EA0CE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1CF,EA2CE,MAAC,IAAD;AACE,IAAA,SAAS,EAAC,KADZ;AAEE,IAAA,SAAS,EAAEtB,OAAO,CAAC6B,QAFrB;AAGE,kBAAW,eAHb;AAIE,IAAA,SAAS,EACP,MAAC,aAAD;AAAe,MAAA,SAAS,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGP,CAAC,CAAC,uCAAD,CADJ,CALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGjC,IAAI,CAACyC,OAAL,CAAaC,YAAb,IAA6B1C,IAAI,CAACyC,OAAL,CAAaC,YAAb,CAA0BC,GAA1B,CAA8B,UAAAC,GAAG;AAAA,WAC7D,MAAC,QAAD;AACE,MAAA,GAAG,EAAEA,GADP;AAEE,MAAA,IAAI,EAAEb,SAFR;AAGE,MAAA,KAAK,MAHP;AAIE,MAAA,MAAM,MAJR;AAKE,MAAA,OAAO,EAAE;AAAA,eAAMT,gBAAgB,CAACsB,GAAD,CAAtB;AAAA,OALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAEA,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPF,EAUE,MAAC,YAAD;AAAc,MAAA,OAAO,EAAEX,CAAC,CAAC,YAAYW,GAAb,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,EAWG5C,IAAI,CAAC6C,QAAL,KAAkBD,GAAlB,IACC,MAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAW,MAAA,KAAK,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAZJ,CAD6D;AAAA,GAAjC,CAVhC,CA3CF,CAfF,CADF;AA4FD;;GAjIQrC,Q;UAESL,S;;;KAFTK,Q;AAmITA,QAAQ,CAACuC,SAAT,GAAqB;AACnBzB,EAAAA,UAAU,EAAErC,SAAS,CAAC+D,IAAV,CAAeC,UADR;AAEnBvB,EAAAA,SAAS,EAAEzC,SAAS,CAAC+D,IAAV,CAAeC,UAFP;AAGnBf,EAAAA,CAAC,EAAEjD,SAAS,CAAC+D,IAAV,CAAeC,UAHC;AAInBhB,EAAAA,MAAM,EAAEhD,SAAS,CAACiE;AAJC,CAArB;AAOA1C,QAAQ,CAAC2C,YAAT,GAAwB;AACtBlB,EAAAA,MAAM,EAAE;AADc,CAAxB;AAIA,eAAe/B,eAAe,CAAC,CAAC,QAAD,EAAW,gBAAX,CAAD,CAAf,CAA8CM,QAA9C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport List from '@material-ui/core/List';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { i18n, withTranslation } from '~/i18n';\r\nimport useStyles from './header-style';\r\n\r\nlet themeType = 'light';\r\nif (typeof Storage !== 'undefined') {\r\n  themeType = localStorage.getItem('luxiTheme') || 'light';\r\n}\r\n\r\nfunction Settings(props) {\r\n  const [ctn, setCtn] = useState(null);\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [isDark, setDark] = useState(themeType === 'dark');\r\n\r\n  function handleClick(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleClose() {\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  const handleChangeMode = () => {\r\n    setDark(!isDark);\r\n    props.toggleDark();\r\n  };\r\n\r\n  function handleChangeLang(lang) {\r\n    if (lang === 'ara') {\r\n      i18n.changeLanguage('ara');\r\n      props.toggleDir('rtl');\r\n    } else {\r\n      i18n.changeLanguage(lang);\r\n      props.toggleDir('ltr');\r\n    }\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCtn(document.getElementById('main-wrap'));\r\n  });\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'simple-popover' : undefined;\r\n  const { invert, t } = props;\r\n  return (\r\n    <div className={classes.setting}>\r\n      <IconButton\r\n        aria-describedby={id}\r\n        aria-label=\"Settings\"\r\n        onClick={handleClick}\r\n        className={\r\n          clsx(\r\n            classes.icon,\r\n            open && classes.active,\r\n            invert && classes.invert\r\n          )\r\n        }\r\n      >\r\n        <SettingsIcon fontSize=\"inherit\" />\r\n      </IconButton>\r\n      <Popover\r\n        id={id}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        container={ctn}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n      >\r\n        <List\r\n          component=\"nav\"\r\n          className={classes.modeMenu}\r\n          aria-label=\"Mode-menu\"\r\n          subheader={(\r\n            <ListSubheader component=\"div\">\r\n              {t('common:crypto-landing.header_theme')}\r\n            </ListSubheader>\r\n          )}\r\n        >\r\n          <ListItem>\r\n            <Typography component=\"div\">\r\n              <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\r\n                <Grid item>{t('common:crypto-landing.header_light')}</Grid>\r\n                <Grid item>\r\n                  <Switch\r\n                    checked={isDark}\r\n                    onChange={handleChangeMode}\r\n                    value={isDark}\r\n                    inputProps={{ 'aria-label': 'checkbox' }}\r\n                  />\r\n                </Grid>\r\n                <Grid item>{t('common:crypto-landing.header_dark')}</Grid>\r\n              </Grid>\r\n            </Typography>\r\n          </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List\r\n          component=\"nav\"\r\n          className={classes.langMenu}\r\n          aria-label=\"Language-menu\"\r\n          subheader={(\r\n            <ListSubheader component=\"div\">\r\n              {t('common:crypto-landing.header_language')}\r\n            </ListSubheader>\r\n          )}\r\n        >\r\n          {i18n.options.allLanguages && i18n.options.allLanguages.map(val => (\r\n            <ListItem\r\n              key={val}\r\n              role={undefined}\r\n              dense\r\n              button\r\n              onClick={() => handleChangeLang(val)}\r\n            >\r\n              <ListItemIcon>\r\n                <i className={val} />\r\n              </ListItemIcon>\r\n              <ListItemText primary={t('common:' + val)} />\r\n              {i18n.language === val && (\r\n                <ListItemSecondaryAction>\r\n                  <CheckIcon color=\"primary\" />\r\n                </ListItemSecondaryAction>\r\n              )}\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n\r\nSettings.propTypes = {\r\n  toggleDark: PropTypes.func.isRequired,\r\n  toggleDir: PropTypes.func.isRequired,\r\n  t: PropTypes.func.isRequired,\r\n  invert: PropTypes.bool,\r\n};\r\n\r\nSettings.defaultProps = {\r\n  invert: false\r\n};\r\n\r\nexport default withTranslation(['common', 'crypto-landing'])(Settings);\r\n"]},"metadata":{},"sourceType":"module"}