{"ast":null,"code":"import _defineProperty from \"D:/projects/TP/v1/TradingPlanet-Home/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"D:\\\\projects\\\\TP\\\\v1\\\\TradingPlanet-Home\\\\components\\\\Forms\\\\Register.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { withTranslation } from \"../../i18n\";\nimport routeLink from \"../../public/text/link\";\nimport { useText } from \"../../theme/common\";\nimport Checkbox from './Checkbox';\nimport SocialAuth from './SocialAuth';\nimport Title from '../Title/TitleSecondary';\nimport AuthFrame from './AuthFrame';\nimport useStyles from './form-style';\n\nfunction Register(props) {\n  _s();\n\n  var classes = useStyles();\n  var text = useText();\n  var t = props.t;\n\n  var _useState = useState(false),\n      check = _useState[0],\n      setCheck = _useState[1];\n\n  var _useState2 = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }),\n      values = _useState2[0],\n      setValues = _useState2[1];\n\n  useEffect(function () {\n    ValidatorForm.addValidationRule('isPasswordMatch', function (value) {\n      if (value !== values.password) {\n        return false;\n      }\n\n      return true;\n    });\n    ValidatorForm.addValidationRule('isTruthy', function (value) {\n      return value;\n    });\n  });\n\n  var handleChange = function handleChange(name) {\n    return function (event) {\n      setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, name, event.target.value)));\n    };\n  };\n\n  var handleCheck = function handleCheck(event) {\n    setCheck(event.target.checked);\n  };\n\n  var handleSubmit = function handleSubmit() {\n    console.log('data submited');\n  };\n\n  return __jsx(AuthFrame, {\n    title: t('common:register_title'),\n    subtitle: t('common:register_subtitle'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: classes.head,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, __jsx(Title, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, t('common:register')), __jsx(Button, {\n    size: \"small\",\n    className: classes.buttonLink,\n    href: routeLink.crypto.login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    className: clsx(classes.icon, classes.signArrow),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"arrow_forward\"), t('common:register_already'))), __jsx(SocialAuth, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: classes.separator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, t('common:register_or'))), __jsx(ValidatorForm, {\n    onError: function onError(errors) {\n      return console.log(errors);\n    },\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    className: classes.input,\n    label: t('common:register_name'),\n    onChange: handleChange('name'),\n    name: \"name\",\n    value: values.name,\n    validators: ['required'],\n    errorMessages: ['This field is required'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    className: classes.input,\n    label: t('common:register_email'),\n    onChange: handleChange('email'),\n    name: \"email\",\n    value: values.email,\n    validators: ['required', 'isEmail'],\n    errorMessages: ['This field is required', 'Email is not valid'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  })), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    type: \"password\",\n    className: classes.input,\n    label: t('common:register_password'),\n    validators: ['required'],\n    onChange: handleChange('password'),\n    errorMessages: ['This field is required'],\n    name: \"password\",\n    value: values.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  })), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    type: \"password\",\n    className: classes.input,\n    label: t('common:register_confirm'),\n    validators: ['isPasswordMatch', 'required'],\n    errorMessages: ['Password mismatch', 'This field is required'],\n    onChange: handleChange('confirmPassword'),\n    name: \"confirm\",\n    value: values.confirmPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }))), __jsx(\"div\", {\n    className: clsx(classes.btnArea, classes.flex),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      validators: ['isTruthy'],\n      errorMessages: \"This field is required\",\n      checked: check,\n      value: check,\n      onChange: function onChange(e) {\n        return handleCheck(e);\n      },\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }),\n    label: __jsx(\"span\", {\n      className: text.caption,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, t('common:form_terms'), \"\\xA0\", __jsx(\"a\", {\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }\n    }, t('common:form_privacy'))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"secondary\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, t('common:continue'))))));\n}\n\n_s(Register, \"OjmJH0ojoJetz1rHgLLbggnyna4=\", false, function () {\n  return [useStyles, useText];\n});\n\n_c = Register;\nRegister.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation(['common'])(Register);\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["D:/projects/TP/v1/TradingPlanet-Home/components/Forms/Register.js"],"names":["React","useState","useEffect","PropTypes","Button","Icon","clsx","Typography","FormControlLabel","Grid","ValidatorForm","TextValidator","withTranslation","routeLink","useText","Checkbox","SocialAuth","Title","AuthFrame","useStyles","Register","props","classes","text","t","check","setCheck","name","email","password","confirmPassword","values","setValues","addValidationRule","value","handleChange","event","target","handleCheck","checked","handleSubmit","console","log","head","buttonLink","crypto","login","icon","signArrow","separator","errors","input","btnArea","flex","e","caption","propTypes","func","isRequired"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,cAAtB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB,MAAMC,OAAO,GAAGH,SAAS,EAAzB;AACA,MAAMI,IAAI,GAAGT,OAAO,EAApB;AAFuB,MAGfU,CAHe,GAGTH,KAHS,CAGfG,CAHe;;AAAA,kBAIGvB,QAAQ,CAAC,KAAD,CAJX;AAAA,MAIhBwB,KAJgB;AAAA,MAITC,QAJS;;AAAA,mBAKKzB,QAAQ,CAAC;AACnC0B,IAAAA,IAAI,EAAE,EAD6B;AAEnCC,IAAAA,KAAK,EAAE,EAF4B;AAGnCC,IAAAA,QAAQ,EAAE,EAHyB;AAInCC,IAAAA,eAAe,EAAE;AAJkB,GAAD,CALb;AAAA,MAKhBC,MALgB;AAAA,MAKRC,SALQ;;AAYvB9B,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,aAAa,CAACuB,iBAAd,CAAgC,iBAAhC,EAAmD,UAACC,KAAD,EAAW;AAC5D,UAAIA,KAAK,KAAKH,MAAM,CAACF,QAArB,EAA+B;AAC7B,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KALD;AAMAnB,IAAAA,aAAa,CAACuB,iBAAd,CAAgC,UAAhC,EAA4C,UAAAC,KAAK;AAAA,aAAIA,KAAJ;AAAA,KAAjD;AACD,GARQ,CAAT;;AAUA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAR,IAAI;AAAA,WAAI,UAAAS,KAAK,EAAI;AACpCJ,MAAAA,SAAS,iCAAMD,MAAN,2BAAeJ,IAAf,EAAsBS,KAAK,CAACC,MAAN,CAAaH,KAAnC,GAAT;AACD,KAFwB;AAAA,GAAzB;;AAIA,MAAMI,WAAW,GAAG,SAAdA,WAAc,CAAAF,KAAK,EAAI;AAC3BV,IAAAA,QAAQ,CAACU,KAAK,CAACC,MAAN,CAAaE,OAAd,CAAR;AACD,GAFD;;AAIA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,GAFD;;AAIA,SACE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAElB,CAAC,CAAC,uBAAD,CAAnB;AAA8C,IAAA,QAAQ,EAAEA,CAAC,CAAC,0BAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEF,OAAO,CAACqB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBnB,CAAC,CAAC,iBAAD,CAAtB,CADF,EAEE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,OAAb;AAAqB,IAAA,SAAS,EAAEF,OAAO,CAACsB,UAAxC;AAAoD,IAAA,IAAI,EAAE/B,SAAS,CAACgC,MAAV,CAAiBC,KAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAExC,IAAI,CAACgB,OAAO,CAACyB,IAAT,EAAezB,OAAO,CAAC0B,SAAvB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGxB,CAAC,CAAC,yBAAD,CAFJ,CAFF,CADF,EAQE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE;AAAK,IAAA,SAAS,EAAEF,OAAO,CAAC2B,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAazB,CAAC,CAAC,oBAAD,CAAd,CADF,CATF,EAYE,MAAC,aAAD;AACE,IAAA,OAAO,EAAE,iBAAA0B,MAAM;AAAA,aAAIT,OAAO,CAACC,GAAR,CAAYQ,MAAZ,CAAJ;AAAA,KADjB;AAEE,IAAA,QAAQ,EAAEV,YAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AACE,IAAA,OAAO,EAAC,QADV;AAEE,IAAA,SAAS,EAAElB,OAAO,CAAC6B,KAFrB;AAGE,IAAA,KAAK,EAAE3B,CAAC,CAAC,sBAAD,CAHV;AAIE,IAAA,QAAQ,EAAEW,YAAY,CAAC,MAAD,CAJxB;AAKE,IAAA,IAAI,EAAC,MALP;AAME,IAAA,KAAK,EAAEJ,MAAM,CAACJ,IANhB;AAOE,IAAA,UAAU,EAAE,CAAC,UAAD,CAPd;AAQE,IAAA,aAAa,EAAE,CAAC,wBAAD,CARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAaE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AACE,IAAA,OAAO,EAAC,QADV;AAEE,IAAA,SAAS,EAAEL,OAAO,CAAC6B,KAFrB;AAGE,IAAA,KAAK,EAAE3B,CAAC,CAAC,uBAAD,CAHV;AAIE,IAAA,QAAQ,EAAEW,YAAY,CAAC,OAAD,CAJxB;AAKE,IAAA,IAAI,EAAC,OALP;AAME,IAAA,KAAK,EAAEJ,MAAM,CAACH,KANhB;AAOE,IAAA,UAAU,EAAE,CAAC,UAAD,EAAa,SAAb,CAPd;AAQE,IAAA,aAAa,EAAE,CAAC,wBAAD,EAA2B,oBAA3B,CARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAbF,EAyBE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AACE,IAAA,OAAO,EAAC,QADV;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,SAAS,EAAEN,OAAO,CAAC6B,KAHrB;AAIE,IAAA,KAAK,EAAE3B,CAAC,CAAC,0BAAD,CAJV;AAKE,IAAA,UAAU,EAAE,CAAC,UAAD,CALd;AAME,IAAA,QAAQ,EAAEW,YAAY,CAAC,UAAD,CANxB;AAOE,IAAA,aAAa,EAAE,CAAC,wBAAD,CAPjB;AAQE,IAAA,IAAI,EAAC,UARP;AASE,IAAA,KAAK,EAAEJ,MAAM,CAACF,QAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAzBF,EAsCE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AACE,IAAA,OAAO,EAAC,QADV;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,SAAS,EAAEP,OAAO,CAAC6B,KAHrB;AAIE,IAAA,KAAK,EAAE3B,CAAC,CAAC,yBAAD,CAJV;AAKE,IAAA,UAAU,EAAE,CAAC,iBAAD,EAAoB,UAApB,CALd;AAME,IAAA,aAAa,EAAE,CAAC,mBAAD,EAAsB,wBAAtB,CANjB;AAOE,IAAA,QAAQ,EAAEW,YAAY,CAAC,iBAAD,CAPxB;AAQE,IAAA,IAAI,EAAC,SARP;AASE,IAAA,KAAK,EAAEJ,MAAM,CAACD,eAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAtCF,CAJF,EAwDE;AAAK,IAAA,SAAS,EAAExB,IAAI,CAACgB,OAAO,CAAC8B,OAAT,EAAkB9B,OAAO,CAAC+B,IAA1B,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,OAAO,EACL,MAAC,QAAD;AACE,MAAA,UAAU,EAAE,CAAC,UAAD,CADd;AAEE,MAAA,aAAa,EAAC,wBAFhB;AAGE,MAAA,OAAO,EAAE5B,KAHX;AAIE,MAAA,KAAK,EAAEA,KAJT;AAKE,MAAA,QAAQ,EAAE,kBAAC6B,CAAD;AAAA,eAAOhB,WAAW,CAACgB,CAAD,CAAlB;AAAA,OALZ;AAME,MAAA,KAAK,EAAC,SANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAWE,IAAA,KAAK,EACH;AAAM,MAAA,SAAS,EAAE/B,IAAI,CAACgC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG/B,CAAC,CAAC,mBAAD,CADJ,UAGE;AAAG,MAAA,IAAI,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,CAAC,CAAC,qBAAD,CADJ,CAHF,CAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAsBE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,IAAI,EAAC,QAAjC;AAA0C,IAAA,KAAK,EAAC,WAAhD;AAA4D,IAAA,IAAI,EAAC,OAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,CAAC,CAAC,iBAAD,CADJ,CAtBF,CAxDF,CAZF,CADF,CADF;AAoGD;;GAtIQJ,Q;UACSD,S,EACHL,O;;;KAFNM,Q;AAyITA,QAAQ,CAACoC,SAAT,GAAqB;AACnBhC,EAAAA,CAAC,EAAErB,SAAS,CAACsD,IAAV,CAAeC;AADC,CAArB;AAIA,eAAe9C,eAAe,CAAC,CAAC,QAAD,CAAD,CAAf,CAA4BQ,QAA5B,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport clsx from 'clsx';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport { withTranslation } from '~/i18n';\r\nimport routeLink from '~/public/text/link';\r\nimport { useText } from '~/theme/common';\r\nimport Checkbox from './Checkbox';\r\nimport SocialAuth from './SocialAuth';\r\nimport Title from '../Title/TitleSecondary';\r\nimport AuthFrame from './AuthFrame';\r\nimport useStyles from './form-style';\r\n\r\nfunction Register(props) {\r\n  const classes = useStyles();\r\n  const text = useText();\r\n  const { t } = props;\r\n  const [check, setCheck] = useState(false);\r\n  const [values, setValues] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\r\n      if (value !== values.password) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    ValidatorForm.addValidationRule('isTruthy', value => value);\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setValues({ ...values, [name]: event.target.value });\r\n  };\r\n\r\n  const handleCheck = event => {\r\n    setCheck(event.target.checked);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    console.log('data submited');\r\n  };\r\n\r\n  return (\r\n    <AuthFrame title={t('common:register_title')} subtitle={t('common:register_subtitle')}>\r\n      <div>\r\n        <div className={classes.head}>\r\n          <Title align=\"left\">{t('common:register')}</Title>\r\n          <Button size=\"small\" className={classes.buttonLink} href={routeLink.crypto.login}>\r\n            <Icon className={clsx(classes.icon, classes.signArrow)}>arrow_forward</Icon>\r\n            {t('common:register_already')}\r\n          </Button>\r\n        </div>\r\n        <SocialAuth />\r\n        <div className={classes.separator}>\r\n          <Typography>{t('common:register_or')}</Typography>\r\n        </div>\r\n        <ValidatorForm\r\n          onError={errors => console.log(errors)}\r\n          onSubmit={handleSubmit}\r\n        >\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <TextValidator\r\n                variant=\"filled\"\r\n                className={classes.input}\r\n                label={t('common:register_name')}\r\n                onChange={handleChange('name')}\r\n                name=\"name\"\r\n                value={values.name}\r\n                validators={['required']}\r\n                errorMessages={['This field is required']}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextValidator\r\n                variant=\"filled\"\r\n                className={classes.input}\r\n                label={t('common:register_email')}\r\n                onChange={handleChange('email')}\r\n                name=\"email\"\r\n                value={values.email}\r\n                validators={['required', 'isEmail']}\r\n                errorMessages={['This field is required', 'Email is not valid']}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6} xs={12}>\r\n              <TextValidator\r\n                variant=\"filled\"\r\n                type=\"password\"\r\n                className={classes.input}\r\n                label={t('common:register_password')}\r\n                validators={['required']}\r\n                onChange={handleChange('password')}\r\n                errorMessages={['This field is required']}\r\n                name=\"password\"\r\n                value={values.password}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6} xs={12}>\r\n              <TextValidator\r\n                variant=\"filled\"\r\n                type=\"password\"\r\n                className={classes.input}\r\n                label={t('common:register_confirm')}\r\n                validators={['isPasswordMatch', 'required']}\r\n                errorMessages={['Password mismatch', 'This field is required']}\r\n                onChange={handleChange('confirmPassword')}\r\n                name=\"confirm\"\r\n                value={values.confirmPassword}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <div className={clsx(classes.btnArea, classes.flex)}>\r\n            <FormControlLabel\r\n              control={(\r\n                <Checkbox\r\n                  validators={['isTruthy']}\r\n                  errorMessages=\"This field is required\"\r\n                  checked={check}\r\n                  value={check}\r\n                  onChange={(e) => handleCheck(e)}\r\n                  color=\"primary\"\r\n                />\r\n              )}\r\n              label={(\r\n                <span className={text.caption}>\r\n                  {t('common:form_terms')}\r\n                  &nbsp;\r\n                  <a href=\"#\">\r\n                    {t('common:form_privacy')}\r\n                  </a>\r\n                </span>\r\n              )}\r\n            />\r\n            <Button variant=\"contained\" type=\"submit\" color=\"secondary\" size=\"large\">\r\n              {t('common:continue')}\r\n            </Button>\r\n          </div>\r\n        </ValidatorForm>\r\n      </div>\r\n    </AuthFrame>\r\n  );\r\n}\r\n\r\n\r\nRegister.propTypes = {\r\n  t: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withTranslation(['common'])(Register);\r\n"]},"metadata":{},"sourceType":"module"}